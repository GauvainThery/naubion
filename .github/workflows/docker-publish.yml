name: Build and Publish Docker Images

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate monorepo structure
        run: |
          echo "Validating monorepo structure..."
          ls -la
          echo "Backend package.json exists:"
          test -f apps/backend/package.json && echo "✓ Yes" || echo "✗ No"
          echo "Frontend package.json exists:"
          test -f apps/frontend/package.json && echo "✓ Yes" || echo "✗ No"
          echo "Shared package.json exists:"
          test -f libs/shared/package.json && echo "✓ Yes" || echo "✗ No"
          echo "Dockerfiles exist:"
          test -f Dockerfile.backend && echo "✓ Dockerfile.backend" || echo "✗ Dockerfile.backend missing"
          test -f Dockerfile.frontend && echo "✓ Dockerfile.frontend" || echo "✗ Dockerfile.frontend missing"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.PAT }}

      - name: Verify registry access
        run: |
          echo "Verifying registry access..."
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Image name: ${{ env.IMAGE_NAME }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy:
    needs: build-and-push
    name: deploy image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Copy docker-compose.yml to server
        run: |
          scp docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.WORK_DIR }}/

      - name: Ensure .env file exists on server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.WORK_DIR }}
            if [ ! -f .env ]; then
              echo 'Warning: .env file does not exist. Please create it with your environment variables.'
              if [ -f .env.example ]; then
                echo 'You can use .env.example as a template.'
              fi
            fi
          "

      - name: Pull images and deploy
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.WORK_DIR }} && \
            docker compose pull && \
            docker compose up -d --remove-orphans && \
            docker image prune -f
          "

      - name: Verify deployment
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
            cd ${{ secrets.WORK_DIR }} && \
            docker compose ps && \
            docker compose logs --tail=10
          "

      - name: cleanup
        run: rm -rf ~/.ssh
